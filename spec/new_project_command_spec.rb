# frozen_string_literal: true

require 'ostruct'
require 'thor'
require './lib/employee'
require './lib/commands/new_project_command'

RSpec.describe NewProjectCommand do
  context 'existing project' do
    bloodties_log = File.join(%W[#{Settings.root} projects bloodties log.adoc])

    before :all do
      FileUtils.mkdir_p File.dirname(bloodties_log)
    end

    after :all do
      FileUtils.rm_r File.dirname(bloodties_log)
    end

    

    it 'creates a new project' do
      allow(subject).to receive(:ask)

      expect(File).not_to exist bloodties_log

      expect { subject.command(%w[Bloodties]) }.to output(/bloodties/).to_stdout

      bloodties = Project.find('Bloodties')
      expect(bloodties).not_to be_nil

      expect(bloodties.file.path).to eq bloodties_log
      expect(File).to exist bloodties_log
      file_content = File.read(bloodties.file.path)
      expect(file_content).to include 'File generated by new-project command'
      expect(file_content).to include "=== Project information\n\nundefined"
    end
  end

  context 'force overwrites project' do
    def galactic_storm_log 
      File.join(%W[#{Settings.root} projects galactic-storm log.adoc])
    end

    before :all do
      FileUtils.mkdir_p File.dirname(galactic_storm_log)
    end

    after :all do
      FileUtils.rm_r File.dirname(galactic_storm_log)
    end

    
    let(:storm) { Project.find('galactic') }

    def storm_log_contents
       File.read(storm.file.path)
    end

    def setup_new_project_with_entry
      allow(subject).to receive(:ask) { 'Intervene in the Kree and Shi\'ar war' }
      expect { subject.command(%w[galactic-storm]) }.to output(/galactic-storm/).to_stdout
      expect(storm).not_to be_nil

      # create a diary entry to differentiate log from a newly created file
      Settings.with_mock_input "\nDefined first epics\n" do
        RecordDiaryEntryCommand.new.command :observation, ['galactic']
      end

      expect(storm.file.path).to eq galactic_storm_log
      expect(File).to exist galactic_storm_log
      expect(storm_log_contents).to include 'Defined first epics'
      expect(storm_log_contents).to include "=== Project information\n\nIntervene"
    end

    it 'will not recreate an existing project without force' do
      setup_new_project_with_entry
      expect(storm_log_contents).to include 'Defined first epics'
      expect { subject.command(%w[galactic-storm]) }.to output(/log.adoc... exists/).to_stdout
      expect(storm_log_contents).to include 'Defined first epics'
    end

    it 'forces recreates an existing project' do
      setup_new_project_with_entry
      expect(storm_log_contents).to include 'Defined first epics'
      expect { subject.command(%w[galactic-storm], OpenStruct.new(force: true)) }.to output(/log.adoc... created/).to_stdout
      expect(storm_log_contents).not_to include 'Defined first epics'
    end
  end
end