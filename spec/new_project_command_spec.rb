# frozen_string_literal: true

require 'ostruct'
require './lib/employee'
require './lib/new_project_command'

RSpec.describe NewProjectCommand do
  context 'existing project' do
    before(:all) do
      FileUtils.mkdir_p 'data/projects/bloodtide'
    end

    after(:all) do
      FileUtils.rm_r 'data/projects/bloodtide'
    end

    subject { NewProjectCommand.new }

    it 'creates a new project' do
      expect(File.exist? 'data/projects/bloodtide/log.adoc').to be_falsey

      expect { subject.command(%w[Bloodtide]) }.to output(/bloodtide/).to_stdout

      bloodtide = Project.find('Bloodtide')
      expect(bloodtide).not_to be_nil

      expect(bloodtide.file.path).to eq 'data/projects/bloodtide/log.adoc'
      expect(File.exist? 'data/projects/bloodtide/log.adoc').to be_truthy
      expect(File.read(bloodtide.file.path)).to include 'File generated by new-project command'
    end
  end

  context 'force overwrites project' do
    before(:all) do
      FileUtils.mkdir_p 'data/projects/galactic-storm'
    end

    after(:all) do
      FileUtils.rm_r 'data/projects/galactic-storm'
    end

    subject { NewProjectCommand.new }
    let (:storm) { Project.find('galactic') }

    def storm_log_contents
       File.read(storm.file.path)
    end

    def setup_new_project_with_entry
      expect { subject.command(%w[galactic-storm]) }.to output(/galactic-storm/).to_stdout
      expect(storm).not_to be_nil

      # create a diary entry to differentiate log from a newly created file
      Settings.with_mock_input "\nDefined first epics\n" do
        RecordDiaryEntryCommand.new.command :observation, ['galactic']
      end

      expect(storm.file.path).to eq 'data/projects/galactic-storm/log.adoc'
      expect(File.exist? 'data/projects/galactic-storm/log.adoc').to be_truthy
      expect(storm_log_contents).to include 'Defined first epics'
    end

    it 'will not recreate an existing project without force' do
      setup_new_project_with_entry
      expect(storm_log_contents).to include 'Defined first epics'
      expect { subject.command(%w[galactic-storm]) }.to output(/log.adoc... exists/).to_stdout
      expect(storm_log_contents).to include 'Defined first epics'
    end

    it 'forces recreates an existing project' do
      setup_new_project_with_entry
      expect(storm_log_contents).to include 'Defined first epics'
      expect { subject.command(%w[galactic-storm], OpenStruct.new(force: true)) }.to output(/log.adoc... created/).to_stdout
      expect(storm_log_contents).not_to include 'Defined first epics'
    end
  end
end